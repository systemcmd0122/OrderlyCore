const { Events, EmbedBuilder, PermissionsBitField } = require('discord.js');
const chalk = require('chalk');
const { getFirestore, doc, getDoc, setDoc, updateDoc, increment, collection, query, where, orderBy, getDocs } = require('firebase/firestore');
const { getDatabase, ref, set, remove, get } = require('firebase/database');

class MessageDeleteManager {
    constructor() {
        this.scheduledDeletions = new Map();
        this.DELETE_DELAY = 60000;
    }
    scheduleDelete(messageId, message, delay = this.DELETE_DELAY) {
        if (this.scheduledDeletions.has(messageId)) {
            clearTimeout(this.scheduledDeletions.get(messageId));
        }
        const timeoutId = setTimeout(async () => {
            try {
                if (message && !message.deleted) await message.delete();
            } catch (error) {
                if (error.code !== 10008) console.error(chalk.red('‚ùå Error deleting voice message:'), error);
            } finally {
                this.scheduledDeletions.delete(messageId);
            }
        }, delay);
        this.scheduledDeletions.set(messageId, timeoutId);
    }
    cleanup() {
        this.scheduledDeletions.forEach(timeoutId => clearTimeout(timeoutId));
        this.scheduledDeletions.clear();
        console.log(chalk.yellow('üßπ Voice message deletion schedules cleared'));
    }
}
const deleteManager = new MessageDeleteManager();

const calculateRequiredXp = (level) => 5 * (level ** 2) + 50 * level + 100;

// Gemini AI„Å´„É¨„Éô„É´„Ç¢„ÉÉ„Éó„Ç≥„É°„É≥„Éà„ÇíÁîüÊàê„Åï„Åõ„ÇãÈñ¢Êï∞ (‰øÆÊ≠£Ê∏à„Åø)
async function generateLevelUpComment(client, user, newLevel, serverName) {
    try {
        const prompt = `„ÅÇ„Å™„Åü„ÅØDiscord„Çµ„Éº„Éê„Éº„ÅÆÂÑ™ÁßÄ„Å™„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÊåáÁ§∫„Å´Âæì„Å£„Å¶„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆ„É¨„Éô„É´„Ç¢„ÉÉ„Éó„ÇíÁ•ùÁ¶è„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏„Çí**‰∏ÄË°å„Åß**ÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

### ÊåáÁ§∫
* **ÂΩπÂâ≤**: „É¶„Éº„Ç∂„Éº„ÅÆÂäüÁ∏æ„ÇíÁß∞„Åà„ÄÅ‰ªäÂæå„ÅÆÊ¥ªË∫ç„ÇíÊúüÂæÖ„Åï„Åõ„Çã„Çà„ÅÜ„Å™„ÄÅ„É¶„Éã„Éº„ÇØ„Åß„ÇØ„É™„Ç®„Ç§„ÉÜ„Ç£„Éñ„Å™„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇ
* **„Éà„Éº„É≥**: ÈùûÂ∏∏„Å´„Éù„Ç∏„ÉÜ„Ç£„Éñ„Åß„ÄÅÂ∞ë„ÅóÂ£ÆÂ§ß„Å™Èõ∞Âõ≤Ê∞ó„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
* **ÂøÖÈ†àË¶ÅÁ¥†**:
    * „É¶„Éº„Ç∂„ÉºÂêç: ${user.displayName}
    * Êñ∞„Åó„ÅÑ„É¨„Éô„É´: ${newLevel}
    * „Çµ„Éº„Éê„ÉºÂêç: ${serverName}
* **Âé≥Ê†º„Å™Âà∂Á¥Ñ**:
    * ÁîüÊàê„Åô„ÇãÊñáÁ´†„ÅØ**ÂøÖ„Åö‰∏ÄË°å**„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    * **80ÊñáÂ≠ó‰ª•ÂÜÖ**„Å´Âèé„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    * ÊØéÂõûÂøÖ„ÅöÈÅï„ÅÜ„Éë„Çø„Éº„É≥„ÅÆÊñáÁ´†„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    * **ÂõûÁ≠î„Å´„ÅØÁ•ùÁ¶è„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„Åø„ÇíÂê´„ÇÅ„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅÆÂâçÁΩÆ„Åç„ÄÅËß£Ë™¨„ÄÅ„É™„Çπ„Éà„ÄÅÂºïÁî®Á¨¶Ôºà„Äå„ÄçÔºâ„ÅØÁµ∂ÂØæ„Å´Âê´„ÇÅ„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ**

### ÁîüÊàê‰æã
* ${serverName}„ÅÆÊ≠¥Âè≤„Å´Âêç„ÇíÂàª„ÇÄÊôÇ„ÅåÊù•„ÅüÔºÅ${user.displayName}„Çà„ÄÅ„É¨„Éô„É´${newLevel}„Å∏„ÅÆÂà∞ÈÅî„ÄÅË™†„Å´„Åä„ÇÅ„Åß„Å®„ÅÜÔºÅ
* Â§©Êô¥„ÇåÔºÅ${user.displayName}„ÅÆÊ¥ªË∫ç„Å´„Çà„Çä${serverName}„ÅØÊñ∞„Åü„Å™ÊôÇ‰ª£„Å∏„ÄÇ‰ºùË™¨„ÅØ„É¨„Éô„É´${newLevel}„Åã„ÇâÂßã„Åæ„ÇãÔºÅ
* ${serverName}„Å´Êñ∞„Åü„Å™ÂÖâ„ÅåÁÅØ„Å£„ÅüÔºÅ${user.displayName}„ÄÅ„É¨„Éô„É´${newLevel}„Å∏„ÅÆÊòáÊ†º„ÄÅÂøÉ„Çà„ÇäÁ•ùÁ¶è„Åô„Çã„ÄÇ`;

        const result = await client.geminiModel.generateContent(prompt);
        // ‰∏çË¶Å„Å™ÊñáÂ≠ó„ÇíÈô§Âéª„Åô„ÇãÂá¶ÁêÜ„ÇíÂº∑Âåñ
        const text = result.response.text().trim().replace(/[\n*„Äå„Äç]/g, '').split('„ÄÇ')[0];
        console.log(chalk.magenta(`[Gemini] Generated comment for VC Level Up: ${text}`));
        return text;
    } catch (error) {
        console.error(chalk.red('‚ùå Gemini API„Åß„ÅÆ„Ç≥„É°„É≥„ÉàÁîüÊàê„Å´Â§±Êïó:'), error.message);
        return `**${user.displayName} „ÅåÊñ∞„Åü„Å™Â¢ÉÂú∞„Å∏Âà∞ÈÅî„Åó„Åæ„Åó„ÅüÔºÅ**\nÁµ∂„ÅàÈñì„Å™„ÅÑÂä™Âäõ„ÅåÂÆü„ÇíÁµê„Å≥„ÄÅ„Çµ„Éº„Éê„ÉºÂÜÖ„Åß„ÅÆÂ≠òÂú®ÊÑü„Åå„Åï„Çâ„Å´Â¢ó„Åó„Åæ„Åó„Åü„ÄÇ`;
    }
}

async function getLevelData(db, guildId, userId) {
    const userRef = doc(db, 'levels', `${guildId}_${userId}`);
    const docSnap = await getDoc(userRef);
    if (docSnap.exists()) {
        const data = docSnap.data();
        if (typeof data.level === 'undefined') data.level = 0;
        return data;
    }
    return { guildId, userId, xp: 0, level: 0, messageCount: 0, lastMessageTimestamp: 0 };
}

// levelingSystem.js „Å®Âêå„Åò„É≠„Éº„É´Â†±ÈÖ¨Âá¶ÁêÜÈñ¢Êï∞
async function handleRoleRewards(member, oldLevel, newLevel, settings) {
    const levelingSettings = settings.leveling || {};
    const roleRewards = levelingSettings.roleRewards || [];
    if (roleRewards.length === 0) return;

    const rewardsToGive = roleRewards
        .filter(reward => reward.level > oldLevel && reward.level <= newLevel)
        .sort((a, b) => a.level - b.level);

    if (rewardsToGive.length === 0) return;

    if (!member.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
        console.error(chalk.red(`[Role Reward] Bot does not have Manage Roles permission in ${member.guild.name}.`));
        return;
    }

    let awardedRoles = [];
    for (const reward of rewardsToGive) {
        try {
            const role = member.guild.roles.cache.get(reward.roleId);
            if (!role) {
                console.warn(chalk.yellow(`[Role Reward] Role ID ${reward.roleId} for level ${reward.level} not found.`));
                continue;
            }
            if (role.position >= member.guild.members.me.roles.highest.position) {
                console.warn(chalk.yellow(`[Role Reward] Cannot assign role ${role.name} as it is higher than or equal to the bot's role.`));
                continue;
            }
            if (!member.roles.cache.has(role.id)) {
                await member.roles.add(role);
                awardedRoles.push(role);
                console.log(chalk.green(`[Role Reward] Awarded role "${role.name}" to ${member.user.tag} for reaching level ${reward.level} (VC).`));
            }
        } catch (error) {
            console.error(chalk.red(`[Role Reward] Failed to award role for level ${reward.level} to ${member.user.tag} (VC):`), error);
        }
    }
    return awardedRoles;
}

async function getLogChannelIdForVc(db, guildId, voiceChannelId) {
    if (!guildId || !voiceChannelId) return null;
    try {
        const settingsRef = doc(db, 'guild_settings', guildId);
        const docSnap = await getDoc(settingsRef);
        if (docSnap.exists()) {
            const mappings = docSnap.data().voiceChannelMappings;
            return mappings?.[voiceChannelId] || null;
        }
        return null;
    } catch (error) {
        console.error(chalk.red(`‚ùå Error fetching log channel for VC ${voiceChannelId}:`), error);
        return null;
    }
}

async function addVcExpAndLevelUp(client, oldState, stayDuration) {
    if (!stayDuration || stayDuration <= 0) return;

    const { guild, member } = oldState;
    const { id: guildId } = guild;
    const { id: userId } = member;

    const minutesStayed = Math.floor(stayDuration / 60000);
    if (minutesStayed <= 0) return;

    const xpGained = minutesStayed * 5;
    const db = client.db;

    const userData = await getLevelData(db, guildId, userId);
    const oldLevel = userData.level;
    userData.xp += xpGained;
    console.log(chalk.blue(`[XP] Added ${xpGained} XP to ${member.user.tag} for ${minutesStayed} minutes in VC. New Total (pre-calc): ${userData.xp}`));

    let leveledUp = false;
    let requiredXp = calculateRequiredXp(userData.level);

    while (userData.xp >= requiredXp) {
        userData.xp -= requiredXp;
        userData.level += 1;
        leveledUp = true;
        requiredXp = calculateRequiredXp(userData.level);
    }

    const userRef = doc(db, 'levels', `${guildId}_${userId}`);
    await setDoc(userRef, userData, { merge: true });

    if (leveledUp) {
        console.log(chalk.green(`[LEVEL UP] ${member.user.tag} reached level ${userData.level} from VC activity!`));
        
        const settingsRef = doc(db, 'guild_settings', guildId);
        const settingsSnap = await getDoc(settingsRef);
        const settings = settingsSnap.exists() ? settingsSnap.data() : {};

        const awardedRoles = await handleRoleRewards(member, oldLevel, userData.level, settings);

        if (settings.levelUpChannel) {
            const targetChannel = await client.channels.fetch(settings.levelUpChannel).catch(() => null);
            if (targetChannel && targetChannel.isTextBased()) {
                const awesomeComment = await generateLevelUpComment(client, member.user, userData.level, guild.name);

                const usersRef = collection(db, 'levels');
                const q = query(usersRef, where('guildId', '==', guildId), orderBy('level', 'desc'), orderBy('xp', 'desc'));
                const snapshot = await getDocs(q);
                let rank = -1;
                snapshot.docs.forEach((doc, index) => {
                    if (doc.data().userId === userId) {
                        rank = index + 1;
                    }
                });

                const progress = requiredXp > 0 ? Math.floor((userData.xp / requiredXp) * 20) : 0;
                const progressBar = `**[** ${'üü¶'.repeat(progress)}${'‚¨õ'.repeat(20 - progress)} **]**`;

                const levelUpEmbed = new EmbedBuilder()
                    .setColor(0x00FFFF)
                    .setAuthor({ name: `LEVEL UP! (VC) - ${member.displayName}`, iconURL: member.user.displayAvatarURL() })
                    .setTitle(`„Ää RANK UP: ${oldLevel}  ‚ûî  ${userData.level} „Äã`)
                    .setDescription(awesomeComment)
                    .setThumbnail(member.user.displayAvatarURL({ dynamic: true, size: 256 }))
                    .addFields(
                        {
                            name: 'üìä ÁèæÂú®„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ',
                            value: `**„Çµ„Éº„Éê„ÉºÂÜÖÈ†Ü‰Ωç:** **${rank !== -1 ? `#${rank}` : 'N/A'}**\n**Á∑è„É°„ÉÉ„Çª„Éº„Ç∏Êï∞:** **${userData.messageCount.toLocaleString()}** Âõû`,
                            inline: false
                        },
                        {
                            name: `üöÄ Ê¨°„ÅÆ„É¨„Éô„É´„Åæ„Åß (Lv. ${userData.level + 1})`,
                            value: `„ÅÇ„Å® **${(requiredXp - userData.xp).toLocaleString()}** XP\n${progressBar} **${userData.xp.toLocaleString()}** / **${requiredXp.toLocaleString()}**`,
                            inline: false
                        }
                    )
                    .setFooter({ text: `„Éú„Ç§„Çπ„ÉÅ„É£„É≥„Éç„É´„Åß„ÅÆÊ¥ªÂãï„ÄÅ„ÅäÁñ≤„ÇåÊßò„Åß„ÅôÔºÅ | ${guild.name}`, iconURL: guild.iconURL() })
                    .setTimestamp();
                
                if (awardedRoles && awardedRoles.length > 0) {
                    levelUpEmbed.addFields({
                        name: 'üèÜ Áç≤Âæó„Åó„Åü„É≠„Éº„É´Â†±ÈÖ¨',
                        value: awardedRoles.map(r => r.toString()).join('\n'),
                        inline: false
                    });
                }

                try {
                    await targetChannel.send({ embeds: [levelUpEmbed] });
                } catch (error) {
                    console.error(chalk.red('VC„É¨„Éô„É´„Ç¢„ÉÉ„ÉóÈÄöÁü•„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:'), error);
                }
            }
        }
    }
}


async function updateUserStayTime(db, guildId, userId, stayDuration) {
    if (!stayDuration || stayDuration <= 0) return;
    try {
        const statsRef = doc(db, 'voice_stats', `${guildId}_${userId}`);
        await setDoc(statsRef, {
            totalStayTime: increment(stayDuration),
            guildId, userId, updatedAt: new Date(),
        }, { merge: true });
        console.log(chalk.blue(`üìä Voice stats updated for ${userId}. Added ${Math.round(stayDuration / 1000)}s`));
    } catch (error) {
        console.error(chalk.red(`‚ùå Error updating user stay time for ${userId}:`), error);
    }
}

async function handleVoiceJoin(newState, client) {
    const { guild, channel, member } = newState;
    const { db, rtdb } = client;

    const sessionRef = ref(rtdb, `voiceSessions/${guild.id}/${member.id}`);
    await set(sessionRef, { channelId: channel.id, channelName: channel.name, joinedAt: Date.now() });
    console.log(chalk.green(`üî¥ RTDB Session started for ${member.user.tag} in ${channel.name}`));
    
    const logChannelId = await getLogChannelIdForVc(db, guild.id, channel.id);
    if (logChannelId) {
        try {
            const logChannel = guild.channels.cache.get(logChannelId);
            if (logChannel?.isTextBased()) {
                const message = await logChannel.send(`üé§ **${member.displayName}** „Åå **${channel.name}** „Å´ÂèÇÂä†„Åó„Åæ„Åó„Åü`);
                deleteManager.scheduleDelete(message.id, message);
            }
        } catch (error) {
            console.error(chalk.red('‚ùå Error sending join log:'), error);
        }
    }
}

async function handleVoiceLeave(oldState, client) {
    const { guild, channel, member } = oldState;
    const { db, rtdb } = client;

    const sessionRef = ref(rtdb, `voiceSessions/${guild.id}/${member.id}`);
    const sessionSnapshot = await get(sessionRef);
    
    if (sessionSnapshot.exists()) {
        const sessionData = sessionSnapshot.val();
        const stayDuration = Date.now() - sessionData.joinedAt;
        
        await updateUserStayTime(db, guild.id, member.id, stayDuration);
        await addVcExpAndLevelUp(client, oldState, stayDuration);
        
        await remove(sessionRef);
        console.log(chalk.yellow(`üî¥ RTDB Session ended for ${member.user.tag}. Duration: ${Math.round(stayDuration / 1000)}s`));
    }

    const logChannelId = await getLogChannelIdForVc(db, guild.id, channel.id);
    if (logChannelId) {
        try {
            const logChannel = guild.channels.cache.get(logChannelId);
            if (logChannel?.isTextBased()) {
                const message = await logChannel.send(`üëã **${member.displayName}** „Åå **${channel.name}** „Åã„ÇâÈÄÄÂá∫„Åó„Åæ„Åó„Åü`);
                deleteManager.scheduleDelete(message.id, message);
            }
        } catch (error) {
            console.error(chalk.red('‚ùå Error sending leave log:'), error);
        }
    }
}

module.exports = {
    name: Events.VoiceStateUpdate,
    async execute(oldState, newState, client) {
        if (newState.member?.user.bot) return;
        const { db, rtdb } = client;
        if (!db || !rtdb) return;

        const oldChannelId = oldState.channelId;
        const newChannelId = newState.channelId;

        try {
            if (!oldChannelId && newChannelId) await handleVoiceJoin(newState, client);
            else if (oldChannelId && !newChannelId) await handleVoiceLeave(oldState, client);
            else if (oldChannelId && newChannelId && oldChannelId !== newChannelId) {
                await handleVoiceLeave(oldState, client);
                await handleVoiceJoin(newState, client);

                const logDestId = await getLogChannelIdForVc(db, newState.guild.id, newState.channelId) || await getLogChannelIdForVc(db, oldState.guild.id, oldState.channelId);
                if (logDestId) {
                    try {
                        const logChannel = newState.guild.channels.cache.get(logDestId);
                        if (logChannel?.isTextBased()) {
                           const message = await logChannel.send(`‚Ü™Ô∏è **${newState.member.displayName}** „Åå ${oldState.channel.name} „Åã„Çâ **${newState.channel.name}** „Å´ÁßªÂãï„Åó„Åæ„Åó„Åü`);
                           deleteManager.scheduleDelete(message.id, message);
                        }
                    } catch(error) {
                        console.error(chalk.red('‚ùå Error sending move log:'), error);
                    }
                }
            }
        } catch (error) {
            console.error(chalk.red('‚ùå Error in voice state update handler:'), error);
        }
    },
    shutdown() {
        deleteManager.cleanup();
        console.log(chalk.yellow('üîÑ Voice state log module shutdown completed'));
    },
};